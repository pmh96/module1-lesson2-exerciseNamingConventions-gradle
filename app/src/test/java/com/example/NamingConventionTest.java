package com.example;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.jupiter.api.Test;

public class NamingConventionTest {

    @Test
    public void testPackageNaming() {
        String packageName = Person.class.getPackage().getName();
        assertTrue(packageName.matches("[a-z]+(\\.[a-z]+)*"),
                "Package name should be all lowercase with words separated by dots.");
    }

    @Test
    public void testClassNaming() {
        String className = Person.class.getSimpleName();
        assertTrue(className.matches("[A-Z][a-zA-Z0-9]*"), "Class name should be in UpperCamelCase.");
    }

    @Test
    public void testConstantNaming() {
        for (Field field : Person.class.getDeclaredFields()) {
            if (java.lang.reflect.Modifier.isStatic(field.getModifiers()) &&
                    java.lang.reflect.Modifier.isFinal(field.getModifiers())) {
                String constantName = field.getName();
                assertTrue(constantName.matches("[A-Z][A-Z0-9_]*"),
                        "Constant name should be in ALL_CAPS_WITH_UNDERSCORES.");
            }
        }
    }

    @Test
    public void testVariableNaming() {
        for (Field field : Person.class.getDeclaredFields()) {
            if (!java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
                String variableName = field.getName();
                assertTrue(variableName.matches("[a-z][a-zA-Z0-9]*"), "Variable name should be in lowerCamelCase.");
            }
        }
    }

    @Test
    public void testMethodNaming() {
        for (Method method : Person.class.getDeclaredMethods()) {
            if (!method.isSynthetic()) { // Exclude synthetic methods (e.g., generated by the compiler)
                String methodName = method.getName();
                assertTrue(methodName.matches("[a-z][a-zA-Z0-9]*"), "Method name should be in lowerCamelCase.");
            }
        }
    }
}
